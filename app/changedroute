from flask import Blueprint, request, jsonify, render_template
from .models import db, Category, MenuItem
import logging
from flask import current_app as app


menu = Blueprint("menu", __name__)


@menu.route("/", endpoint="home")
def home():
    return render_template("home.html")


@menu.route("/manage_menu")
def manage_menu():
    return render_template("manage_menu.html")


@menu.route("/index")
def order_management():
    return render_template("manage_order.html")


@menu.route("/add_category", methods=["POST"])
def add_category():
    data = request.json
    new_category = Category(name=data["name"])
    db.session.add(new_category)
    db.session.commit()
    return jsonify({"message": "Category added successfully!"})


@menu.route("/get_categories", methods=["GET"])
def get_categories():
    categories = Category.query.all()
    return jsonify([{"id": cat.id, "name": cat.name} for cat in categories])


@menu.route("/add_item", methods=["POST"])
def add_item():
    data = request.json
    new_item = MenuItem(
        name=data["name"], price=data["price"], category_id=data["category_id"]
    )
    db.session.add(new_item)
    db.session.commit()
    return jsonify({"message": "Menu item added successfully!"})


@menu.route("/get_items", methods=["GET"])
def get_items():
    try:
        items = MenuItem.query.all()
        response = jsonify(
            [
                {
                    "id": item.id,
                    "name": item.name,
                    "price": item.price,
                    "category": (
                        item.category_ref.name if item.category_ref else "Unknown"
                    ),
                }
                for item in items
            ]
        )
        app.logger.info(f"Successfully retrieved {len(items)} items.")
        return response
    except Exception as e:
        app.logger.error(f"Error fetching items: {e}")
        return jsonify({"error": "Internal server error"}), 500


@menu.route("/delete_category/<int:id>", methods=["DELETE"])
def delete_category(id):
    category = Category.query.get(id)
    if category:
        db.session.delete(category)
        db.session.commit()
        return jsonify({"message": "Category deleted successfully!"})
    return jsonify({"error": "Category not found"}), 404


@menu.route("/delete_item/<int:id>", methods=["DELETE"])
def delete_item(id):
    item = MenuItem.query.get(id)
    if item:
        db.session.delete(item)
        db.session.commit()
        return jsonify({"message": "Item deleted successfully!"})
    return jsonify({"error": "Item not found"}), 404
